#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

typedef struct Edge{
int src, dest, weight;
} Edge;

int find(int parent[], int i) {
// Write your code here...
	if(parent[i] == i)
		return i;
	return find(parent, parent[i]);
}



void union1(int parent[], int rank[], int i, int j) {
	
	// Write your code here...
	int root_i = find(parent, i);
	int root_j = find(parent, j);

	if(root_i!=root_j){
		if(rank[root_i] > rank[root_j]){
			parent[root_j] = root_i;
		} else if(rank[root_i] < root_j){
			parent[root_i] = root_j;
		}else{
			parent[root_j] = root_i;
			rank[root_i]++;
		}
	}
}

int compareEdges(const void* a, const void* b){
	Edge* edgeA = (Edge*)a;
	Edge* edgeB = (Edge*)b;

	if(edgeA->weight!=edgeB->weight){
		return edgeA->weight-edgeB->weight;
	}
	if(edgeA->src!=edgeB->src){
		return edgeA->src-edgeB->src;
	}
	return edgeA->dest - edgeB->dest;
}

void kruskalMST(int **cost, int V) {

	// Write your code here...
	int edge_count = 0;
	for(int i=0; i<V; i++){
		for(int j=i+1; j<V; j++){
			if(cost[i][j] != 9999){
				edge_count++;
			}
		}
	}
	Edge* edges = (Edge*)malloc(edge_count*sizeof(Edge));

	int k=0;
	for(int i=0; i<V; i++){
		for(int j=i+1; j<V; j++){
			if(cost[i][j] != 9999){
				edges[k].src = i;
				edges[k].dest = j;
				edges[k].weight = cost[i][j];
				k++;
			}
		}
	}
	qsort(edges, edge_count, sizeof(Edge), compareEdges);

	int *parent = (int *)malloc(V * sizeof(int));
	int *rank = (int *)malloc(V * sizeof(int));

	for(int i = 0; i<V; i++){
		parent[i] = i;
		rank[i] = 0;
	}
	int minCost = 0;
	int mst_edges = 0;
	int current_edge_index = 0;

	while(mst_edges < V-1 && current_edge_index < edge_count){
		Edge next_edge = edges[current_edge_index++];
		int x = find(parent, next_edge.src);
		int y = find(parent, next_edge.dest);

		if(x != y){
			printf("Edge %d:(%d, %d) cost:%d\n", mst_edges, next_edge.src, next_edge.dest, next_edge.weight);
			minCost += next_edge.weight;
			union1(parent, rank, next_edge.src, next_edge.dest);
			mst_edges++;
		}
	}
	printf("Minimum cost= %d\n", minCost);

	free(edges);
	free(parent);
	free(rank);
}


int main() {
    int V;
    printf("No of vertices: ");
    scanf("%d", &V);

    int **cost = (int **)malloc(V * sizeof(int *));
    for (int i = 0; i < V; i++)
        cost[i] = (int *)malloc(V * sizeof(int));

    printf("Adjacency matrix:\n");
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            scanf("%d", &cost[i][j]);

    kruskalMST(cost, V);

    for (int i = 0; i < V; i++)
        free(cost[i]);
    free(cost);

    return 0;
}
